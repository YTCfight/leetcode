// 方法一：
class Solution {
    static List<Integer> list = new ArrayList<>();
    //因为 list 是静态的，所以在下一次使用前要把 list 清空。
    {
        list.clear();
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        //当 root 为空时，直接返回。
        if (root == null) {
            return new ArrayList<>();
        }
        int ret = root.val;
        list.add(ret);
        preorderTraversal(root.left);
        preorderTraversal(root.right);
        return list;
    }
}



或者：

 public class BinaryTree {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) {
            return result;
        }
        //访问根节点。此处访问就是把元素插入到集合
        result.add(root.val);
        //递归遍历左子树
        result.addAll(preorderTraversal(root.left));
        //递归遍历右子树
        result.addAll(preorderTraversal(root.right));
        return result;
    }


//方法二：非递归

//非递归先序遍历
    public static void prevOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        //1.先创建一个栈
        Stack<TreeNode> stack = new Stack<>();
        //2.把根节点入栈
        stack.push(root);
        //3.循环取栈顶元素,访问它
        while (!stack.isEmpty()) {
            TreeNode cur = stack.pop();
            System.out.print(cur.val);
            //4.把当前元素的右子树和左子树分别入栈
            if (cur.right != null) {
                stack.push(cur.right);
            }
            if (cur.left != null) {
                stack.push(cur.left);
            }
        }
    }
