方法一：递归

 public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> list = new ArrayList<>();
       if (root == null) {
           return list;
       }
       list.addAll(preorderTraversal(root.left));
       list.add(root.val);
       list.addAll(preorderTraversal(root.right));
        return list;
    }
    
    
    
    
方法二：非递归

public static void midOrder(TreeNode root) {
        if (root == null) {
            return;
        }
        //1.创建一个栈
        Stack<TreeNode> stack = new Stack<>();
        //2.创建一个 cur 变量从 root 出发
        TreeNode cur = root;
        while (true) {
            //3.只要 cur 遇到的节点非空就入栈，cur = cur.left
            while (cur != null) {
                stack.push(cur);
                cur = cur.left;
            }
            //4.当 cur 遇到 null 就出栈一个元素，访问这个元素
            if (stack.isEmpty()) {
                //遍历结束
                break;
            }
            TreeNode top = stack.pop();
            System.out.println(top.val);
            //5.cur 指向当前元素的右子树
            cur = top.right;
        }
    }
