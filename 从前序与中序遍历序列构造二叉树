private int index = 0;
    public TreeNode buildTree(int [] preorder, int [] inorder) {
        //每次构建之前要置位 0 ， 因为在线 OJ 有多组测试
        index = 0;
        //在这个递归过程中，需要处理某个具体的子树
        //[0, inorder.length) 当前处理的子树对应的中序遍历
        TreeNode root = builderTreeHelper(preorder, inorder, 0, inorder.length);
        return root;
    }

    private TreeNode builderTreeHelper(int [] preorder, int [] inorder,
                                       int inorderLeft, int inorderRight) {
        //先判定非法情况
        if (inorderLeft >= inorderRight) {
            //这个子树的中序遍历是没有的。这就是空子树
            return null;
        }
        //取出当前值构造当前子树的根节点
        TreeNode root = new TreeNode(preorder[index]);
        index++; //取完这个节点，就可以取下一个节点了
        //需要找到这个节点在中序遍历中的位置
        //pos 只要说先序遍历和中序遍历序列都是对的
        //pos 是一定能够找到的
        int pos = find(inorder, inorderLeft, inorderRight, root.val);
        root.left = builderTreeHelper(preorder, inorder, inorderLeft, pos);
        root.right = builderTreeHelper(preorder, inorder, pos + 1, inorderRight);
        return root;
    }
    private int find(int[] inorder, int inorderLeft, int inorderRight, int val) {
        for (int i = inorderLeft; i < inorderRight; i++) {
            if (inorder[i] == val) {
                return i;
            }
        }
        return -1;
    }
