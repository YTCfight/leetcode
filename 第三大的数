//第三大的数
int Fun(int arr[], int len)
{
	int max1 = 0;
	int max2 = 0;
	int max3 = 0;
	for (int i = 0; i < len; i++)
	{
		if (arr[i]>max1)
		{
			max3 = max2;
			max2 = max1;
			max1 = arr[i];
		}
		else if (arr[i] > max2 && arr[i] < max1)
		{
			max3 = max2;
			max2 = arr[i];
		}
		else if (arr[i]>max3 && arr[i] < max2)
		{
			max3 = arr[i];
		}
	}
	return max3;
}
int main()
{
	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8 };
	int len = sizeof(arr) / sizeof(arr[0]);
	int ret = Fun(arr, len);
	printf("%d\n", ret);
	system("pause");
	return 0;
}



//O（n*n）的算法
 if (nums.length == 1) {
            return nums[0];
        }
        if (nums.length == 2) {
            return nums[0] > nums[1] ? nums[0] : nums[1];
        }
        Arrays.sort(nums);
       int count = 0;
        for (int i = nums.length - 1; i > 0; i--) {
            if (nums[i] > nums[i - 1]) {
                count++;
            }
            if (count == 2) {
                return nums[i - 1];
            }
        }
        return nums[nums.length - 1];
