//第三大的数

//O（n*n）的算法
 if (nums.length == 1) {
            return nums[0];
        }
        if (nums.length == 2) {
            return nums[0] > nums[1] ? nums[0] : nums[1];
        }
        Arrays.sort(nums);
       int count = 0;
        for (int i = nums.length - 1; i > 0; i--) {
            if (nums[i] > nums[i - 1]) {
                count++;
            }
            if (count == 2) {
                return nums[i - 1];
            }
        }
        return nums[nums.length - 1];
	
	
	
	
//三个数比较法。O（n）
	 if (nums.length == 1) {
            return nums[0];
        }
        if (nums.length == 2) {
            return nums[0] > nums[1] ? nums[0] : nums[1];
        }
        long max1 = Long.MIN_VALUE;
        long max2 = Long.MIN_VALUE;
        long max3 = Long.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > max1) {
                max3 = max2;
                max2 = max1;
                max1 = nums[i];
            } else if (nums[i] != max1 && nums[i] > max2) {
                max3 = max2;
                max2 = nums[i];
            } else if (nums[i] != max1 && nums[i] != max2 && nums[i] > max3) {
                max3 = nums[i];
            }
        }
        if (max3 != Long.MIN_VALUE) {
            return (int)max3;
        } else {
            return (int)max1;
        }
