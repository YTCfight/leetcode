public class Solution {
    int[][] directions = new int[][]{{0,-1},{0,1},{1,0},{-1,0}};

    /**
     * BFS
     */ 
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int n = grid.length, m = grid[0].length;
        boolean[][] visited = new boolean[n][m];

        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '0' || visited[i][j]) continue;

                res++;
                Queue<int[]> queue = new LinkedList<>();
                queue.add(new int[]{i,j});
                visited[i][j] = true;
                while (!queue.isEmpty()){
                    int[] top = queue.poll();
                    for (int k = 0; k < 4; k++) {
                        int newX = top[0] + directions[k][0];
                        int newY = top[1] + directions[k][1];
                        if (newX < 0 || newX >= n || newY < 0 || newY >= m || visited[newX][newY] || grid[newX][newY] == '0') continue;
                        queue.add(new int[]{newX, newY});
                        visited[newX][newY] = true;
                    }
                }
            }
        }
        return res;
    }

    /**
     * BFS 不设置 visited 矩阵，修改原矩阵
     */
    public int numIslands1(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        int n = grid.length, m = grid[0].length;

        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '0') continue; // 剪枝
                res++;
                Queue<int[]> queue = new LinkedList<>();
                queue.add(new int[]{i,j});
                grid[i][j] = '0';
                while (!queue.isEmpty()){
                    int[] top = queue.poll();
                    for (int k = 0; k < 4; k++) {
                        int newX = top[0] + directions[k][0];
                        int newY = top[1] + directions[k][1];
                        if (newX < 0 || newX >= n || newY < 0 || newY >= m || grid[newX][newY] == '0') continue;
                        queue.add(new int[]{newX, newY});
                        grid[newX][newY] = '0';
                    }
                }
            }
        }
        return res;
    }

    /**
     * DFS，直接修改原矩阵
     */
    int n;
    int m;
    public int numIslands2(char[][] grid) {
        if (grid == null || grid.length == 0) return 0;
        n = grid.length;
        m = grid[0].length;

        int res = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1') {
                    res++;
                    dfs(grid, i, j);
                }
            }
        }
        return res;
    }

    private void dfs(char[][] grid, int row, int col) {
        if (row < 0 || row >= n || col < 0 || col >= m || grid[row][col] == '0') return;
        grid[row][col] = '0';
        for (int[] direction : directions) {
            dfs(grid, row + direction[0], col + direction[1]);
        }
    }
}
