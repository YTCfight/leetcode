class Solution {
    int[][] arr = {{-1,0},{1,0},{0,-1},{0,1}};
    public void solve(char[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        int row = board.length;
        int col = board[0].length;
        int[][] visited = new int[row][col];
        for (int i = 0; i < row; i++) {
            if (board[i][0] == 'O') {
                dfs(board, visited, row, col, i, 0);
            }
            if (board[i][col - 1] == 'O') {
                dfs(board, visited, row, col, i, col - 1);
            }
        }
        for (int i = 1; i < col - 1; i++) {
            if (board[0][i] == 'O') {
                dfs(board, visited, row, col, 0, i);
            }
            if (board[row - 1][i] == 'O') {
                dfs(board, visited, row, col, row - 1, i);
            }
        }
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                if (board[i][j] == '#') {
                    board[i][j] = 'O';
                }
            }
        }
    }

    public void dfs(char[][] board, int[][] visited, int row, int col, int sr, int sc) {
        board[sr][sc] = '#';
        visited[sr][sc] = 1;
        for (int i = 0; i < 4; i++){
            int newSr = sr + arr[i][0];
            int newSc = sc + arr[i][1];
            if (newSr < 0 || newSc < 0 || newSr >= row || newSc >= col) {
                continue;
            }
            if (visited[newSr][newSc] == 0 && board[newSr][newSc] == 'O') {
                dfs(board, visited, row, col, newSr, newSc);
            }
        }
    }
}
