class MyStack {
   //用两个队列实现栈
    LinkedList<Integer> A = new LinkedList<>();
    LinkedList<Integer> B = new LinkedList<>();
    public void push(int x) {
        A.offer(x);
    }

    public int pop() {
        //需要先把 A 中的元素往 B 中搬运，一直到 A 中只剩下一个元素,就可以出栈了，最后互换 A 和 B
        if (A.isEmpty()) {
            return 0;
        }
        while (A.size() > 1) {
            int cur = A.removeFirst();
            B.addLast(cur);
        }
        //最终要出栈的元素
        int ret = A.removeFirst();
        //交换AB
        swap();
        return ret;
    }

    public int top() {
        //需要先把 A 中的元素往 B 中搬运，一直到 A 中只剩下一个元素,就可以出栈了，最后互换 A 和 B
        if (A.isEmpty()) {
            return 0;
        }
        while (A.size() > 1) {
            int cur = A.removeFirst();
            B.addLast(cur);
        }
        //最终要出栈的元素
        int ret = A.removeFirst();
        B.addLast(ret);
        //交换AB
        swap();
        return ret;
    }

    public boolean empty() {
        return A.isEmpty();
    }

    private void swap() {
        LinkedList<Integer> tmp = A;
        A = B;
        B = tmp;
    }
}
