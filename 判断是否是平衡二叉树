//平衡树
    public boolean isBalanced(TreeNode root) {
        //1.如果是空树，就算平衡
        if (root == null) {
            return true;
        }
        //2.如果没有子树，也算平衡
        if (root.left == null && root.right == null) {
            return true;
        }
        //3.求一下左右子树的高度,判断一下差值是否 <= 1
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        if (leftDepth - rightDepth > 1 || rightDepth - leftDepth > 1) {
            return false;
        }
        //4.递归判定左子树和右子树是不是也是平衡的
        return isBalanced(root.left) && isBalanced(root.right);
    }
 private int maxDepth(TreeNode root) {
        //root 的深度 => 1 + max(左子树的深度, 右子树的深度)
        //1.如果是空s树，深度为 0
        if (root == null) {
            return 0;
        }
        //2.如果只有一个根节点，没有左右子树，深度就是 1
        if (root.left == null && root.right == null) {
            return 1;
        }
        //3. 1 + max（左子树的深度， 右子树的深度）
        int leftDepth = maxDepth(root.left);
        int rightDepth = maxDepth(root.right);
        return 1 + (Math.max(leftDepth, rightDepth));
    }
