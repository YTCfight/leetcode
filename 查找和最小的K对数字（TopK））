public class TestTopK {
    //Pair 表示数对，方便使用优先队列来进行管理
    //一个普通的类，无法直接放到优先队列中的。
    //此时优先级如何定义的还不明确
    //可以把当前的类实现 Comparable 接口，并实现 compareTo 方法
    //此时优先队列就可以借助 compareTo 决定优先级的高低
    static class Pair implements Comparable<Pair> {
        public int n1;
        public int n2;
        public int sum;

        public Pair(int n1, int n2) {
            this.n1 = n1;
            this.n2 = n2;
            this.sum = n1 + n2;
        }

        @Override
        public int compareTo(Pair o) {
            //this，other
            //如果希望this 在前 other 在后，返回 < 0;
            //如果希望this 在后 other 在前，返回 > 0;
            //如果希望二者相等，返回 0。
            if (this.sum < o.sum) {
                return 1;
            }
            if (this.sum > o.sum) {
                return -1;
            }
            return 0;
        }
    }

    public List<List<Integer>> kSmallestPairs(int[] num1, int[] num2, int k) {
        List<List<Integer>> result = new ArrayList<>();
        if (k < 1) {
            return result;
        }
        //创建一个优先队列,通过这个优先队列完成最终的topk
        PriorityQueue<Pair> queue = new PriorityQueue<>();
        for (int i = 0; i < num1.length && i < k; i++) {
            for (int j = 0; j < num2.length && i < k; j++) {
                queue.offer(new Pair(num1[i], num2[j]));
                if (queue.size() > k) {
                    //始终保证队列中不超过 k 个元素
                    //超过的话就需要淘汰弱者
                    queue.poll();
                }
            }
        }
        //这两重循环结束后，此时 queue 就保存了需要的 k 对数字
        while (!queue.isEmpty()) {
            Pair pair = queue.poll();
            List<Integer> tmp = new ArrayList<>();
            tmp.add(pair.n1);
            tmp.add(pair.n2);
            //每次出队列的值插入到 result 最前面
            result.add(0,tmp);
        }
        return result;
      }
    }
