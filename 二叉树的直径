private int maxDiameter = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        depth(root);
        return maxDiameter;
    }
    //求每个节点的最大深度
    private int depth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        if (root.left == null && root.right == null) {
            return 1;
        }
        int leftDepth = depth(root.left);
        int rightDepth = depth(root.right);
        //如果当前根节点中的左右子树的深度差大于 maxDiameter ，进行复制替换。
        if (leftDepth + rightDepth > maxDiameter) {
            maxDiameter = leftDepth + rightDepth;
        }
        return 1 + (Math.max(leftDepth, rightDepth));
    }
